apiVersion: v1
kind: Service
metadata:
  name: ${MICROSERVICE_NAME}
  labels:
    app: ${MICROSERVICE_NAME}
    service: ${MICROSERVICE_NAME}
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: ${MICROSERVICE_NAME}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${MICROSERVICE_NAME}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${MICROSERVICE_NAME}
  labels:
    app: ${MICROSERVICE_NAME}
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${MICROSERVICE_NAME}
      version: v1
  template:
    metadata:
      labels:
        app: ${MICROSERVICE_NAME}
        version: v1
    spec:
      serviceAccountName: ${MICROSERVICE_NAME}
      imagePullSecrets:
        - name: acr-login
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - ${MICROSERVICE_NAME}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      volumes:  
        - name: ssl    
          secret:      
            secretName: dev-kafka-cert
        - name: appd-agent-repo-java
          emptyDir: {}
      initContainers:
        - name: appd-agent-attach-java
          image: '${REGISTRY}/appdynamics/java-agent:${APPD_AGENT_VERSION}'
          command:
            - cp
            - '-ra'
            - /opt/appdynamics/.
            - /opt/appdynamics-java
          securityContext:
            runAsUser: 12345
            runAsGroup: 23456
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 200m
              memory: 75M
            requests:
              cpu: 10m
              memory: 50M
          volumeMounts:
            - name: appd-agent-repo-java
              mountPath: /opt/appdynamics-java
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      containers:
      - name: ${MICROSERVICE_NAME}
        image: ${REGISTRY}/${REPOSITORY}:${TAG}
        imagePullPolicy: Always
        securityContext:
            runAsUser: 12345
            runAsGroup: 23456
            runAsNonRoot: true
            allowPrivilegeEscalation: false
        envFrom:
        - configMapRef:
            name: appd-agent-java-config
        env:
        - name: MICROSERVICE
          value: ${MICROSERVICE_NAME}
        - name: APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: cluster-agent-secret
              key: controller-key
        - name: JAVA_TOOL_OPTIONS
          value: ' -Dappdynamics.agent.accountAccessKey=$(APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY) -Dappdynamics.controller.hostName=$(APPDYNAMICS_CONTROLLER_HOST_NAME) -Dappdynamics.controller.port=$(APPDYNAMICS_CONTROLLER_PORT) -Dappdynamics.controller.ssl.enabled=false -Dappdynamics.agent.accountName=$(APPDYNAMICS_AGENT_ACCOUNT_NAME) -Dappdynamics.agent.applicationName=$(APPDYNAMICS_AGENT_APPLICATION_NAME) -Dappdynamics.agent.tierName=$(MICROSERVICE) -Dappdynamics.agent.reuse.nodeName=true -Dappdynamics.agent.reuse.nodeName.prefix=$(MICROSERVICE) -Dappdynamics.socket.collection.bci.enable=true -javaagent:/opt/appdynamics-java/javaagent.jar'
        - name: spring.kafka.properties.bootstrap.servers
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.bootstrap.servers
        - name: spring.kafka.properties.schema.registry.url
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.schema.registry.url
        - name: spring.kafka.properties.security.protocol
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.security.protocol
        - name: spring.kafka.properties.sasl.mechanism
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.sasl.mechanism
        - name: spring.kafka.properties.basic.auth.credentials.source
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.basic.auth.credentials.source
        - name: spring.kafka.properties.sasl.jaas.config
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.sasl.jaas.config
        - name: spring.kafka.properties.schema.registry.basic.auth.user.info
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: spring.kafka.properties.schema.registry.basic.auth.user.info
        resources:
          requests:
            memory: "256Mi"
            cpu: "${REQUESTS_CPU}"
          limits:
            memory: "512Mi"
            cpu: "1"
        ports:
        - containerPort: 8080
        lifecycle:
          preStop:
                exec:
                    command: ["sh", "-c", "sleep 10"]
         volumeMounts:    
          - name: ssl      
            mountPath: "/ssl"      
            readOnly: true
          - name: appd-agent-repo-java
            mountPath: /opt/appdynamics-java
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20