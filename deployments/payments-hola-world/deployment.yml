apiVersion: v1
kind: Service
metadata:
  name: ${MICROSERVICE_NAME}
  labels:
    app: ${MICROSERVICE_NAME}
    service: ${MICROSERVICE_NAME}
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: ${MICROSERVICE_NAME}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${MICROSERVICE_NAME}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${MICROSERVICE_NAME}
  labels:
    app: ${MICROSERVICE_NAME}
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${MICROSERVICE_NAME}
      version: v1
  template:
    metadata:
      labels:
        app: ${MICROSERVICE_NAME}
        version: v1
    spec:
      serviceAccountName: ${MICROSERVICE_NAME}
      imagePullSecrets:
        - name: acr-login
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - ${MICROSERVICE_NAME}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      containers:
      - name: ${MICROSERVICE_NAME}
        image: ${REGISTRY}/${REPOSITORY}:${TAG}
        imagePullPolicy: Always
        env:
        - name: KAFKA_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: KAFKA_HOST
        - name: KAFKA_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: KAFKA_PORT
        - name: MONGODB_HOST
          valueFrom:
          configMapKeyRef:
            name: app-config
            key: MONGODB_HOST
        - name: MONGODB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: MONGODB_PORT                      
        resources:
          requests:
            memory: "256Mi"
            cpu: "${REQUESTS_CPU}"
          limits:
            memory: "512Mi"
            cpu: "1"
        ports:
        - containerPort: 8080
        lifecycle:
          preStop:
                exec:
                    command: ["sh", "-c", "sleep 10"]
        # readinessProbe:
        #   httpGet:
        #     path: /actuator/health
        #     port: 8080
        #   initialDelaySeconds: 30
        #   periodSeconds: 1
        #   failureThreshold: 90
        # livenessProbe:
        #   httpGet:
        #     path: /actuator/health
        #     port: 8080
        #   initialDelaySeconds: 120